package com.MicroFinWay.service;

import com.MicroFinWay.dto.PaymentInfoDTO;
import com.MicroFinWay.dto.request.PaymentRequestDTO;
import com.MicroFinWay.model.Accounting;
import com.MicroFinWay.model.Credit;
import com.MicroFinWay.model.PaymentSchedule;
import com.MicroFinWay.repository.AccountingRepository;
import com.MicroFinWay.repository.CreditRepository;
import com.MicroFinWay.repository.PaymentScheduleRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class PaymentService {

    private final CreditRepository creditRepository;
    private final PaymentScheduleRepository paymentScheduleRepository;
    private final AccountingRepository accountingRepository;
    private final AccountingService accountingService;
    private final OrganizationService organizationService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É –¥–ª—è —Ñ–æ—Ä–º—ã
     */
    public PaymentInfoDTO getCreditInfo(String contractNumber) {
        Credit credit = creditRepository.findByContractNumber(contractNumber)
                .orElseThrow(() -> new IllegalArgumentException("–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + contractNumber));

        // üîπ –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥ ‚Äî —Å—É–º–º–∞ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        BigDecimal mainDebt = paymentScheduleRepository.findByCreditIdAndPaymentStatus(credit.getId(), 0).stream()
                .map(PaymentSchedule::getPrincipalPayment)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // üîπ –ü—Ä–æ—Ü–µ–Ω—Ç—ã ‚Äî –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ
        BigDecimal interest = paymentScheduleRepository.findByCreditIdAndPaymentStatus(credit.getId(), 0).stream()
                .map(PaymentSchedule::getInterestPayment)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // üîπ –ü–µ–Ω–∏ –∏ —à—Ç—Ä–∞—Ñ—ã ‚Äî –∏–∑ –ø—Ä–æ–≤–æ–¥–æ–∫
        List<Accounting> penaltyEntries = accountingRepository.findByContractNumberAndDebitAccountContaining(contractNumber, "16405");
        List<Accounting> fineEntries = accountingRepository.findByContractNumberAndDebitAccountContaining(contractNumber, "45994");

        BigDecimal penalty = penaltyEntries.stream()
                .map(Accounting::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal fine = fineEntries.stream()
                .map(Accounting::getAmount)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        return new PaymentInfoDTO(
                credit.getUser().getFullName(),
                "10101000904619251001", // üî∏ –∫–∞—Å—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å—á–µ—Ç–æ–≤)
                mainDebt,
                interest,
                penalty,
                fine,
                BigDecimal.ZERO // other
        );
    }

    /**
     * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
     */
    public void processPayment(String contractNumber, PaymentRequestDTO dto) {
        Credit credit = creditRepository.findByContractNumber(contractNumber)
                .orElseThrow(() -> new IllegalArgumentException("–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " + contractNumber));

        LocalDate opDay = organizationService.getCurrentOperationalDay();

        // üîπ 1. –ü–æ–≥–∞—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞
        if (dto.getMainDebt() != null && dto.getMainDebt().compareTo(BigDecimal.ZERO) > 0) {
            accountingService.creditPayedMainLoan(contractNumber, dto.getMainDebt());
        }

        // üîπ 2. –ü–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if (dto.getInterest() != null && dto.getInterest().compareTo(BigDecimal.ZERO) > 0) {
            accountingService.creditPayedInterestMain(contractNumber, dto.getInterest());
        }

        // üîπ 3. –ü–æ–≥–∞—à–µ–Ω–∏–µ –ø–µ–Ω–∏
        if (dto.getPenalty() != null && dto.getPenalty().compareTo(BigDecimal.ZERO) > 0) {
            accountingService.payOverdueInterest(contractNumber, dto.getPenalty());
        }

        // üîπ 4. –ü–æ–≥–∞—à–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤
        if (dto.getFine() != null && dto.getFine().compareTo(BigDecimal.ZERO) > 0) {
            accountingService.createEntry(
                    contractNumber,
                    dto.getFine(),
                    c -> "10101000904619251001",
                    c -> "45994",
                    "",
                    "–ü–æ–≥–∞—à–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
            );
        }

        // üîπ 5. –ü—Ä–æ—á–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è
        if (dto.getOther() != null && dto.getOther().compareTo(BigDecimal.ZERO) > 0) {
            accountingService.createEntry(
                    contractNumber,
                    dto.getOther(),
                    c -> "10101000904619251001",
                    c -> "45201",
                    "",
                    "–ü—Ä–æ—á–∏–π –ø–ª–∞—Ç—ë–∂ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
            );
        }
    }
}