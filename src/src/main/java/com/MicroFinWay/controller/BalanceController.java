package com.MicroFinWay.controller;

import com.MicroFinWay.model.Credit;
import com.MicroFinWay.model.CreditBalance;
import com.MicroFinWay.model.CreditBalanceHistory;
import com.MicroFinWay.repository.CreditRepository;
import com.MicroFinWay.service.BalanceService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–ª—å–¥–æ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º.
 */
@RestController
@RequestMapping("/api/balance")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class BalanceController {

    private final BalanceService balanceService;
    private final CreditRepository creditRepository;

    /**
     * üìä –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–∞–ª—å–¥–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—Ä–µ–¥–∏—Ç—É
     */
    @GetMapping("/current/{contractNumber}")
    public ResponseEntity<List<CreditBalance>> getCurrentBalances(
            @PathVariable String contractNumber
    ) {
        return ResponseEntity.ok(balanceService.getBalancesByContract(contractNumber));
    }

    /**
     * üìà –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∞–ª—å–¥–æ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
     */
    @GetMapping("/history/{contractNumber}")
    public ResponseEntity<List<CreditBalanceHistory>> getHistory(
            @PathVariable String contractNumber
    ) {
        return ResponseEntity.ok(balanceService.getHistoryByContract(contractNumber));
    }

    /**
     * üßæ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Å—á—ë—Ç—É –∫—Ä–µ–¥–∏—Ç–∞
     * (–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä —Ö–æ—á–µ—Ç –≤–Ω–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É)
     */
    @PostMapping("/update")
    public ResponseEntity<String> updateBalanceManually(
            @RequestParam String contractNumber,
            @RequestParam String accountCode,
            @RequestParam BigDecimal amount,
            @RequestParam boolean isDebit
    ) {
        Credit credit = creditRepository.findByContractNumber(contractNumber)
                .orElse(null);

        if (credit == null) {
            return ResponseEntity.badRequest().body("–ö—Ä–µ–¥–∏—Ç —Å –Ω–æ–º–µ—Ä–æ–º " + contractNumber + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        balanceService.updateBalance(credit, accountCode, amount, isDebit);
        return ResponseEntity.ok("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å—á—ë—Ç–∞ " + accountCode);
    }

    /**
     * üìÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∏–º–æ–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è)
     */
    @PostMapping("/snapshot")
    public ResponseEntity<String> snapshotBalances(@RequestParam(required = false) String date) {
        LocalDate targetDate = date != null ? LocalDate.parse(date) : LocalDate.now();
        balanceService.snapshotDailyBalances(targetDate);
        return ResponseEntity.ok("–°–Ω–∏–º–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞ " + targetDate + " —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    }

    /**
     * ‚öôÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
     */
    @PostMapping("/rebuild")
    public ResponseEntity<String> rebuildAllBalances() {
        List<Credit> allCredits = creditRepository.findAll();
        balanceService.rebuildAllBalances(allCredits);
        return ResponseEntity.ok("–í—Å–µ –±–∞–ª–∞–Ω—Å—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
    }
}