package com.MicroFinWay.service;

import com.MicroFinWay.model.Accounting;
import com.MicroFinWay.model.Credit;
import com.MicroFinWay.repository.AccountingRepository;
import com.MicroFinWay.repository.CreditRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.function.Function;

/**
 * Service class for handling accounting transactions specifically related to credits.
 * This service provides methods for managing various accounting actions such as credit issuance,
 * repayment, interest calculations, and account transfers.
 */
@Service
@RequiredArgsConstructor
public class AccountingService {

    private final CreditRepository creditRepository;
    private final AccountingRepository entryRepository;
    private final OrganizationService organizationService; // üîπ –¥–æ–±–∞–≤–ª–µ–Ω–æ

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≤–æ–¥–∫–∏.
     */
    public void createEntry(
            String contractNumber,
            BigDecimal amount,
            Function<Credit, String> debitResolver,
            Function<Credit, String> creditResolver,
            String transactionType,
            String description
    ) {
        Credit credit = creditRepository.findByContractNumber(contractNumber)
                .orElseThrow(() -> new IllegalArgumentException("Credit not found: " + contractNumber));

        Accounting entry = new Accounting();
        entry.setContractNumber(contractNumber);
        entry.setDebitAccount(debitResolver.apply(credit));
        entry.setCreditAccount(creditResolver.apply(credit));
        entry.setAmount(amount);

        // üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å–µ—Ä–≤–µ—Ä–∞
        LocalDate operationalDate = organizationService.getCurrentOperationalDay();
        entry.setOperationDate(operationalDate);

        entry.setTransactionType(transactionType);
        entry.setStatus(0);
        entry.setDescription(description);

        entryRepository.save(entry);
    }

    /**
     * –í—ã–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–∞ –∫—Ä–µ–¥–∏—Ç–∞
     */
    public void givenCreditMainLoan(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount12401(), // –¥–µ–±–µ—Ç: –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–µ–¥–∏—Ç
                credit -> "10101000904619251001",                     // –∫—Ä–µ–¥–∏—Ç: –∫–∞—Å—Å–∞/–±–∞–Ω–∫
                "",
                "–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –í—ã–¥–∞—á–∞ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    public void givenCreditCardLoan(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount12401(),
                credit -> "10503000904619251001",
                "",
                "–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –Ω–∞ –∫–∞—Ä—Ç—É " + contractNumber
        );
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–∞ –∫—Ä–µ–¥–∏—Ç–∞
     */
    public void creditPayedMainLoan(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "10101000904619251001",                     // –¥–µ–±–µ—Ç: –∫–∞—Å—Å–∞
                credit -> credit.getCreditAccount().getAccount12401(), // –∫—Ä–µ–¥–∏—Ç: –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–µ–¥–∏—Ç
                "",
                "–ü–æ–≥–∞—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–∞ –∫—Ä–µ–¥–∏—Ç–∞
     */
    public void creditPayedCardMainLoan(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "10509000204619251002",                     // –¥–µ–±–µ—Ç: –∫–∞—Å—Å–∞
                credit -> credit.getCreditAccount().getAccount12401(), // –∫—Ä–µ–¥–∏—Ç: –æ—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–µ–¥–∏—Ç
                "",
                "–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç—É
     */
    public void creditPayedInterestMain(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "10101000904619251001",                        // –¥–µ–±–µ—Ç: –∫–∞—Å—Å–∞
                credit -> credit.getCreditAccount().getAccount16307(),  // –∫—Ä–µ–¥–∏—Ç: —Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                "",
                "–ü–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ü–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     */
    public void payOverdueInterest(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "10101000904619251001", // –∫–∞—Å—Å–∞
                credit -> credit.getCreditAccount().getAccount16377(), // –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ %
                "",
                "–ü–æ–≥–∞—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     *
     * @param contractNumber
     * @param amount
     */
    public void accrueInterest(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "42001000604619251004", // —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è %
                credit -> credit.getCreditAccount().getAccount16307(),
                "",
                "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
     *
     * @param contractNumber
     * @param amount
     */
    public void accrueInterestByCreditInTransitAccount(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "42001000604619251004", // —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è %
                credit -> credit.getCreditAccount().getAccount16309(),
                "",
                "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     *
     * @param contractNumber
     * @param amount
     */
    public void accrueInterestOverdue(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "42005000604619251004", // —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è %
                credit -> credit.getCreditAccount().getAccount16307(),
                "",
                "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
     *
     * @param contractNumber
     * @param amount
     */
    public void accrueByCreditInTransitAccountOverdue(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "42005000604619251004", // —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è %
                credit -> credit.getCreditAccount().getAccount16307(),
                "",
                "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –°–Ω—è—Ç–∏–µ —Å –∑–∞–ª–æ–≥–∞
     *
     * @param contractNumber
     * @param amount
     */
    public void releaseCollateral(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount94502(), // –ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ 94501
                credit -> "96381000604619251005",
                "",
                "–°–Ω—è—Ç–∏–µ —Å –∑–∞–ª–æ–≥–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –£—á–µ—Ç –∑–∞–ª–æ–≥–∞
     *
     * @param contractNumber
     * @param amount
     */
    public void registerCollateral(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> "96381000604619251005",
                credit -> credit.getCreditAccount().getAccount94502(),
                "",
                "–£—á—ë—Ç –∑–∞–ª–æ–≥–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ü–µ—Ä–µ–±—Ä–æ—Å–∫–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
     *
     * @param contractNumber
     * @param amount
     */
    public void moveMainToOverdue(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount12401(),
                credit -> credit.getCreditAccount().getAccount12405(),
                "",
                "–ü–µ—Ä–µ–±—Ä–æ—Å–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π " + contractNumber
        );
    }

    /**
     * –ü–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
     *
     * @param contractNumber
     * @param amount
     */
    public void moveInterestToOverdue(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount16307(),
                credit -> credit.getCreditAccount().getAccount16377(),
                "",
                "–ü–µ—Ä–µ–Ω–æ—Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Å—Ä–æ—á–∫—É –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }

    /**
     * –ü–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏ –∫—Ä–µ–¥–∏—Ç–µ –Ω–µ –Ω–∞–ª–∏—á–∫–æ–π
     *
     * @param contractNumber
     * @param amount
     */
    public void moveInterestToOverdueByCreditInTransitAccount(String contractNumber, BigDecimal amount) {
        createEntry(
                contractNumber,
                amount,
                credit -> credit.getCreditAccount().getAccount16309(),
                credit -> credit.getCreditAccount().getAccount16377(),
                "",
                "–ü–µ—Ä–µ–Ω–æ—Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Å—Ä–æ—á–∫—É –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É " + contractNumber
        );
    }



}
